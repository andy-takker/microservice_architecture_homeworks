{
	"info": {
		"_postman_id": "cf599843-536c-497d-b5ad-d2018c15642f",
		"name": "hw4",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28677357",
		"_collection_link": "https://orange-meadow-410450.postman.co/workspace/Socket~e593945a-4f50-4411-a9ba-cdb9b84dec21/collection/28677357-cf599843-536c-497d-b5ad-d2018c15642f?action=share&source=collection_link&creator=28677357"
	},
	"item": [
		{
			"name": "Get Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - items and total\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('items');",
							"    pm.expect(responseData).to.have.property('total');",
							"});",
							"",
							"",
							"pm.test(\"Items array is present and has expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.items).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.items).to.have.lengthOf(responseData.total);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/users?limit=10&offset=0",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"users"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "0"
						}
					]
				},
				"description": "Return List of Users"
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"const responseData = pm.response.json();",
							"pm.test(\"Request body contains fields\", function () {",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('username');",
							"    pm.expect(responseData).to.have.property('email');",
							"    pm.expect(responseData).to.have.property('first_name');",
							"    pm.expect(responseData).to.have.property('last_name');",
							"    pm.expect(responseData).to.have.property('created_at');",
							"    pm.expect(responseData).to.have.property('updated_at');",
							"});",
							"pm.variables.set(\"user_id\", responseData.id)",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{$randomUserName}}\",\n    \"email\": \"{{$randomUserName}}@example.com\",\n    \"phone\": \"+7999999999\",\n    \"first_name\": \"Vasya\",\n    \"last_name\": \"Petrov\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header as application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const responseData = pm.response.json();",
							"pm.test(\"Request body contains fields\", function () {",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('username');",
							"    pm.expect(responseData).to.have.property('email');",
							"    pm.expect(responseData).to.have.property('first_name');",
							"    pm.expect(responseData).to.have.property('last_name');",
							"    pm.expect(responseData).to.have.property('created_at');",
							"    pm.expect(responseData).to.have.property('updated_at');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response has the required Content-Type header as application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const responseData = pm.response.json();",
							"pm.test(\"Request body contains fields\", function () {",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('username');",
							"    pm.expect(responseData).to.have.property('email');",
							"    pm.expect(responseData).to.have.property('first_name');",
							"    pm.expect(responseData).to.have.property('last_name');",
							"    pm.expect(responseData).to.have.property('created_at');",
							"    pm.expect(responseData).to.have.property('updated_at');",
							"});",
							"",
							"pm.test(\"Request body equal fields\", function(){",
							"    pm.expect(responseData.first_name).to.eq(\"NewFirstName\");",
							"    pm.expect(responseData.last_name).to.eq(\"NewLastName\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{$randomUserName}}\",\n    \"email\": \"{{$randomUserName}}@example.com\",\n    \"phone\": \"+7999999999\",\n    \"first_name\": \"NewFirstName\",\n    \"last_name\": \"NewLastName\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check status code 204",
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "arch.homework",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "00000000-0000-4000-8000-000000000001",
			"type": "default"
		}
	]
}