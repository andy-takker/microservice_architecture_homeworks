openapi: 3.0.3
info:
  title: Otus Home Work №4
  description: |-
    Пример сервиса для работы с пользователями
  termsOfService: http://swagger.io/terms/
  contact:
    email: sergey.natalenko@mail.ru
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://arch.homework/api/v1
tags:
  - name: user
    description: Operations about user
paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Creating new user in database
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    get:
      tags:
        - user
      summary: Return user list
      description: Returning users with limit and offset params
      operationId: userList
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 100
    
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUser'
          
  /users/{user_id}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: user_id
          in: path
          description: The ID that needs to be fetched
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user ID supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: Updating all user data except ID
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          description: The ID that needs to be updated
          required: true
          schema:
            type: string
            format: UUID
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: Deleting user from database
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          description: The ID that needs to be deleted
          required: true
          schema:
            type: string
            format: UUID
      responses:
        default:
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    CreateUser:
      type: object
      properties:
        username:
          type: string
          example: theUser
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ListUser:
      type: object
      properties:
        total:
          type: integer
          format: int64
        items:
          type: array
          items: 
            $ref: '#/components/schemas/User'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
